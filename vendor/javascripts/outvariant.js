var t=/(%?)(%([sdjo]))/g;function serializePositional(t,r){switch(r){case"s":return t;case"d":case"i":return Number(t);case"j":return JSON.stringify(t);case"o":{if("string"===typeof t)return t;const r=JSON.stringify(t);return"{}"===r||"[]"===r||/^\[object .+?\]$/.test(r)?t:r}}}function format(r,...e){if(0===e.length)return r;let n=0;let s=r.replace(t,((t,r,s,a)=>{const i=e[n];const o=serializePositional(i,a);if(!r){n++;return o}return t}));n<e.length&&(s+=` ${e.slice(n).join(" ")}`);s=s.replace(/%{2,2}/g,"%");return s}var r=2;function cleanErrorStack(t){if(!t.stack)return;const e=t.stack.split("\n");e.splice(1,r);t.stack=e.join("\n")}var e=class extends Error{constructor(t,...r){super(t);this.message=t;this.name="Invariant Violation";this.message=format(t,...r);cleanErrorStack(this)}};var invariant=(t,r,...n)=>{if(!t)throw new e(r,...n)};invariant.as=(t,r,e,...n)=>{if(!r){const r=null!=t.prototype.name;const s=r?new t(format(e,n)):t(format(e,n));throw s}};export{e as InvariantError,format,invariant};

